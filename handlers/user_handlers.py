from aiogram import F, Router
from aiogram.filters import Command, CommandStart
# from aiogram.filters.command import CommandObject
# from aiogram.types.chat_member import ChatMember
# from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import Message

router = Router()


# @router.message(F.text.startswith('/'), F.chat.type.in_({"group", "supergroup"}))
# async def block_commands_for_non_admins(message: Message, bot):
#     member = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
#     if member.status not in {"administrator", "creator"}:
#         await message.delete()

@router.message(CommandStart())
async def start_message(message: Message):
    await message.answer(
        text="I am Welcome Bot, that welcomes new members of the group!\n"
             "Here how it reacts to new members in the group: \n\n"
             "Please welcome our newest amazing volunteer, (name)! (username) please send your photo and bio in the same message. Thanks and welcome to our familyüòäü§ó \n\n"
    )

@router.message(Command(commands='help'))
async def help_message(message: Message):
    await message.answer(text='If you have some problems with the bot or questions, please contact @simple_urm\n')

@router.message(F.new_chat_members)
async def welcome_new_members(message: Message):
    for user in message.new_chat_members:
        name = user.full_name
        username = f"@{user.username}" if user.username else name
        text = f"Please welcome our newest amazing volunteer, {name}! {username} please send your photo and bio in the same message. Thanks and welcome to our familyüòäü§ó"
        await message.answer(text)

EXCEPTIONS = {}

def is_valid_name(full_name: str) -> bool:
    if full_name in EXCEPTIONS:
        return True
    parts = full_name.strip().split()
    if len(parts) != 2:
        return False
    return all(p[0].isupper() for p in parts)

@router.message(Command("check_names"))
async def check_names_handler(message: Message):
    chat_type = message.chat.type
    chat_id = message.chat.id

    await message.answer(f"‚ÑπÔ∏è –¢–∏–ø —á–∞—Ç–∞: <b>{chat_type}</b>\nüÜî Chat ID: <code>{chat_id}</code>", parse_mode="HTML")

    if chat_type != "supergroup":
        return await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö. –ü–µ—Ä–µ–≤–µ–¥–∏ –≥—Ä—É–ø–ø—É –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É.")

    await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")

    try:
        admins = await message.bot.get_chat_administrators(chat_id)
    except Exception:
        return await message.answer("‚ùå –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º.")

    invalid_users = []
    checked_ids = set()

    for admin in admins:
        user = admin.user
        if user.id in checked_ids or user.is_bot:
            continue
        checked_ids.add(user.id)

        name = user.full_name
        if not is_valid_name(name):
            invalid_users.append(f"{name} (@{user.username or '–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞'})")

    if not invalid_users:
        await message.answer("‚úÖ –í—Å–µ –∏–º–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–æ—Ä–º–∞—Ç—É –ò–º—è –§–∞–º–∏–ª–∏—è.")
    else:
        text = "‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–º–µ–Ω–∏:\n" + "\n".join(invalid_users)
        await message.answer(text)